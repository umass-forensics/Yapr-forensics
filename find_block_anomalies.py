"""
This script tries to find any anomalies in block times that the blocks in the
TSV generated by summarize_block_times might have
"""

__author__ = 'Saksham'

import YaffsParser


def main():
    parser = YaffsParser.get_argparser()
    args = parser.parse_args()

    print args.imagefile

    sorted_blocks = YaffsParser.extract_ordered_blocks(args.imagefile,
                                                       args.chunksize,
                                                       args.oobsize,
                                                       args.blocksize,
                                                       args.tag_offset)

    anomaly_indices = []
    oddity_indices = []
    prev_end = -1
    prev_start = -1
    index_ctr = 0
    with open('yaffs2-nexus-one-postdeletion_times.tsv', 'r') as tsv_file:
        content = tsv_file.read()
        lines = content.split('\n')
        lines = [x for x in lines if x is not '']
        for line in lines:
            parts = line.split('\t')
            start_range = int(parts[3])
            end_range = int(parts[5])

            if start_range < prev_start or end_range < prev_end or start_range > end_range:
                anomaly_indices.append(int(parts[1]))
            else:
                if (start_range - prev_start > 31536000) or (end_range - prev_end > 31536000):
                    oddity_indices.append(int(parts[1]))
                prev_start = start_range
                prev_end = end_range

            index_ctr += 1

    ranges1 = split_to_ranges(anomaly_indices)
    ranges2 = split_to_ranges(oddity_indices)
    pass


def split_to_ranges(block_nums):
    ranges = []
    if len(block_nums) > 0:
        prev_block = block_nums[0]
        i = 1
        while i < len(block_nums):
            curr_block = block_nums[i]
            p_block = prev_block

            while curr_block == p_block + 1:
                i += 1
                p_block = curr_block
                if i < len(block_nums):
                    curr_block = block_nums[i]
            ranges.append((prev_block, p_block))
            prev_block = curr_block
            i += 1
        last_entry = ranges[-1][1]
        if curr_block > last_entry:
            ranges.append((curr_block, curr_block))

    return ranges


if __name__ == '__main__':
    main()
